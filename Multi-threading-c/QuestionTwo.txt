2a(i) If Fork 1 is uncommented, the program displays the first line of the test file twice. 
	When Fork 2 is uncommented, the program displays the first line twice and then the second line. However, after repeatedly running it the out keeps varying, at times the first two lines are displayed only once. 
 
 2a(ii) Yes by uncommenting only one of the statements, the position of the one being uncommenting affects the result. If Fork 1 is uncommented only, the display prints out the first line of test data twice. If Fork2 is uncommented, the display prints out just the first line or at times the first and second only. Fork creates a child process that runs alongside the parent process which is being executed. This child process duplicates the data structures available to it when it is called. When Fork1 is called, the child process is called before the fopen call is made. The parent processes buffer and data etc is copied over to the child. The child runs alongside the parent and executes the fopen function, then the fgets and finally prints result to the screen. 
 On the other hand, when Fork2 is called, after opening the file using fopen, it skips a step and proceeds to the fgets section, and finally the print. This results in an improper read by the child process as it wasn't able to use the pointer to open te file initially, resulting in different end results. 
 
 2b) The function is not functionning as intended as the regex_t variable is created however, it has not been initialized with the regular expression required for a match. 
 An integer should be initialized with the regexcompare like: regcomp(Â®ex, "[:word:]", 0), where "[:word:}" is replaced with the word being searched for. Additionally, int match should be either 0 or 1, 0 for false and 1 for true. 
 
 2c) The signal() function is a signal handler. The SiGINIT is the interactive attention signal. The signal() calls function my_handler() which then calls another function do_something_else() and computes i. After this the program returns back to main and the for loop is entered, which calls the do_something() function if i>0 and reduces i again. i can be seen as a global variable in the program. The major problem with this program is the use of a global variable which is being changed thoughout different functions. The firt function is incrementing it while the next instance is decrementing it. Additionally, the for loop does not have any variables within it.  Global variables must be avoided as they causes bugs within the program that will be hard to detect and fix. 
